设置符号文件路径: SRV*D:\symbols*http://msdl.microsoft.com/download/symbols
或者在命令窗口输入.symfix c:\windows\symbols地址也是和上面等价的 .sympath+ c:\symbols

.symfix
.symfix+ c:\symbols
.sympath

r           可以显示系统崩溃时的寄存器，和最后的命令状态
dd          显示当前内存地址，dd 参数：显示参数处的内存
u           可以显示反汇编的指令
kb          显示call stack 内容

.bugcheck   可以显示出错的代码
!analyze -v 显示分析的详细信息

分析IIS(CPU占用过高常用命令、死锁、死循环等)：

若在64位电脑上dump出32位应用dump文件的方法(不能直接dump，直接dump出来的分析时会报错)：
方法1) 运行32位任务管理器dump: C:\Windows\SysWOW64\taskmgr.exe
方法2) 使用其它dump工具

若待分析的应用为32位程序，则应安装32位WinDbg。
32位程序加载：
.load C:\Windows\Microsoft.NET\Framework\v4.0.30319\sos
.load C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorwks
.loadby sos clr

若执行分析时各命令出现：
SOS does not support the current target architecture.
则需要使用其它方式dump出32位应用的dump文件。

64位程序加载：
.load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\sos
.load C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscorwks
.loadby sos clr

查看已加载的SOS扩展：.chain
查看SOS版本号：!eeversion

查看所有线程: !threads
列出调用栈(默认为前20层)：kb
列出所有进程中线程 ~*kb
显示所有线程栈信息 ~*k
将显示线程的全部三种时间值 在!runaway命令中加入标志值7
切换到该线程 ~ 120s 120表示线程序列
获得实际的异常的调用堆栈 kv 
查看线程池占用的CPU: !threadpool
查看CPU使用时间多的线程: !runaway
切换到指定线程(ID为!runaway或!threads查出来的线程ID): ~ID s
显示原始产生异常的线程(或调试器加载时活动的线程): ~#
显示所有线程信息: ~*
查看栈信息: !clrstack
查看栈信息和局部变量：!clrstack -l
查看栈信息、传入参数和局部变量：!clrstack -a
查看堆信息：!heap
查看正在使用的锁：!syncblk
查看当前线程的异常：!pe
以对象形式查看指定地址：!do 对象地址
查找模块名(dll名)：!name2ee *!xxx.xxx.xx 或!name2ee * 对象名
    (如!name2ee *!Moqikaka.GameServer.Inuyasha.BLL.TreasureLootTargetBLL.RandTreasureLootRobot)
显示模块(dll)的详细信息：!dumpmodule 模块地址
将模块(dll)保存到文件：!savemodule 模块地址 保存路径及文件名
将地址对应的值作为地址(类似于使用C中的*)：poi(<地址>) 如： dd poi(0x112233) + 0x10
!dumpheap
查看所有堆栈信息(会列出类名：可用于查找哪些对象占用的内存大)：!dumpheap -stat
查看上面查出来的相应地址详细信息：!dumpheap -mt <上面查出来的MT值>
!DumpStackObjects

查看加载的dll信息: lmvm clr


高CPU分析方法：
!threadpool 看CPU占用高低
!runaway 查看哪些线程占用的CPU过高v1
!threads 查看线程数和线程ID
批量切换线程，并显示调用栈信息：~ID s 然后 !clrstack
重点查看v1中查出的占用CPU过高的线程调用栈信息


高内存占用分析方法：

高内存占用分析一：
1) !dumpheap -stat 看哪些占用大
2) !dumpheap -mt <上面查出来的MT值> 显示出哪些地方用到了这些内存
3) !do <上面查出来的地址> 查看对象信息和内容
4) !dumpmt <上面查出来的MethodTable值>  显示出这是属于哪个文件

高内存占用分析二：
!heap -s 找出占用内存大的，记录下第一个值(句柄)v1
!heap -stat -h <v1> 查看占用百分比高的，记录下size,v2
!heap -flt s <v2> 列出所有分配这个大小的指针，记录下(任意一个)UserPtr(第5列)值,v3
!heap -p -a <v3> 查看这个结构的详细信息及调用栈



一、命令

1、  加载调试器

命令：

.loadby sos mscorwks          .Net 3.5版本及以下

.loadby sos clr                        .Net 4.0

           .loadc:\windows\microsoft.net\framework\v2.0.50727\sos.dll

         说明：

如果服务器的.Net版本与本机不匹配需要服务器版本的mscordacwks.dll文件，如下：

.sympath=

 

2、  基本操作指令

!help                                sos指令帮助

!threads                         显示所有线程

!threadpool(!tp)           显示程序池信息

~54s                                       查看54号线程

kb                                    显示当前线程的callstack

~*e !clrstack               看所有线程的堆栈信息

!dumpheap                    显示托管堆的信息

!clrstack                         显示调用栈

!dumpstackobjects      打印当前thread的stack中保存的所有托管的object

!dumpclass                    打印出指定类型信息址上的类型定义

!eeheap                          列举出当前进程中managedheap的统计信息

!dumpobj(!do)               显示一个对象的内容

!dumparray                   显示数组

!syncblk                          显示同步块

!runaway                       显示线程cpu时间

!gcroot                                     跟踪对象内存引用

!gchandles                     打印出当前所有的GCHandle统计信息

!objsize                           打印出指定object

!pe                                   打印异常

vertarget                       查看系统运行时间
3、内存泄露常用指令

         !dumpheap–stat     检查当前所有托管类型的统计信息

!dumpheap –mt      查看函数表地址中的各个对象信息

!do                               查看某个对象的具体信息

!da                               查看数组信息

!gcroot                       查看哪个root了某个对象
使用例子：

!dumpheap –mt 79124418  79124418是指某个函数表的地址。

!do 0aca1000                              查看0aca1000地址中的对象

!gcroot 0aca1000                       查看谁root 了0aca1000对象

 

4、线程Hang住常用指令

         !threads                     查看托管经程的统计信息

         !tp(threadpool)        查看一共设有多少个线程在运行

         !runawayf                 查看各个线程的CPU使用情况   

~*e!clrstack              查看各个线程都在做什么

!synblk                        查看AwareLock的Lock方法

        

         不常用指令：

         !ip2md                        找到对应的module信息，后面参数为Callback中的EIP地址

         lmvm                           查看DLL/EXE文件信息，参数为某个dll文件名称

         !savemodule             保存DLL到本场

        

         使用例子：

         !ip2md0x09d30bao

         lmvmcommonobjects

         !savemodule081f0000 d:\xiongli\commandobject.dll

 

5、内存指令：

         S                                   可以搜索内存

r                                    显示寄存器的信息

         d                                   显示内存地址上的值

         e                                   命令修改内存地址上的值

         !address                     命令显示某一地址上的页信息

         使用例子：

         1）使用d命令显示esp寄存器指向的内存，默认为byte

                  d  esp

         2）用dd命令直接指定054efc14地址，第二个d表示用DWORD格式

                   dd 054efc14

         3）用ed命令把054efc14地址上的值修改成11112222

                   ed 054efc14  11112222

         4）再次用dd命令显示054efc14地址上的值，后面的L4参数表示长度为4个DWORD

                   dd 054efc14  L4

         5）在内存中搜索sina.com

                   s –u  0012ff40 L?8000000 “sina.com”

 

6、其他常用指令：

         lmf                               列出当前进程中加载的所有DLL文件和对应的路径

         ~                                   显示线程信息和不同线程之间切换的值

         k                                   显示当前线程的callstack

         ~*k                               结合~和k命令，来显示所有线程的callstack

 

 

 

二、脚本
1、  生成DUMP包脚本
Set objShell =CreateObject("Wscript.Shell")

Dim InputPid

InputPid = InputBox("请输入Pid")

objCommand1 = """D:\ProgramFiles\Debugging Tools for Windows (x86)\adplus.vbs""" &" -hang -o d:\dump -quiet -p " & InputPid

objShell.Run(objCommand1)
保存成.vbs的文件
点开运行后，输入对应的进程PID，即可抓下当前进程的包。


